#!/usr/bin/env python3
#
# Based on: https://github.com/Jibbow/denormalized-tpch
#
# Example: ./denormalize.py ./sf1 --out ./sf1/denormalized.csv
#

import os
import argparse
import duckdb


import os
import pandas as pd

def initiate_tables(conn):
    conn.execute('DROP TABLE IF EXISTS PART;')
    conn.execute('DROP TABLE IF EXISTS PARTSUPP;')
    conn.execute('DROP TABLE IF EXISTS SUPPLIER;')
    conn.execute('DROP TABLE IF EXISTS CUSTOMER;')
    conn.execute('DROP TABLE IF EXISTS ORDERS;')
    conn.execute('DROP TABLE IF EXISTS LINEITEM;')
    conn.execute('DROP TABLE IF EXISTS NATION;')
    conn.execute('DROP TABLE IF EXISTS REGION;')

    conn.execute('''
        CREATE TABLE PART (
            P_PARTKEY       INTEGER PRIMARY KEY,
            P_NAME          VARCHAR(55),
            P_MFGR          CHAR(25),
            P_BRAND         CHAR(10),
            P_TYPE          VARCHAR(25),
            P_SIZE          INTEGER,
            P_CONTAINER     CHAR(10),
            P_RETAILPRICE   DECIMAL,
            P_COMMENT       VARCHAR(23)
        );
    ''')

    conn.execute('''
        CREATE TABLE PARTSUPP (
            PS_PARTKEY      BIGINT NOT NULL, -- references P_PARTKEY
            PS_SUPPKEY      BIGINT NOT NULL, -- references S_SUPPKEY
            PS_AVAILQTY     INTEGER,
            PS_SUPPLYCOST   DECIMAL,
            PS_COMMENT      VARCHAR(199),
            PRIMARY KEY (PS_PARTKEY, PS_SUPPKEY)
        );
    ''')

    conn.execute('''
        CREATE TABLE SUPPLIER (
            S_SUPPKEY       INTEGER PRIMARY KEY,
            S_NAME          CHAR(25),
            S_ADDRESS       VARCHAR(40),
            S_NATIONKEY     BIGINT NOT NULL, -- references N_NATIONKEY
            S_PHONE         CHAR(15),
            S_ACCTBAL       DECIMAL,
            S_COMMENT       VARCHAR(101)
        );
    ''')

    conn.execute('''
        CREATE TABLE CUSTOMER (
            C_CUSTKEY       INTEGER PRIMARY KEY,
            C_NAME          VARCHAR(25),
            C_ADDRESS       VARCHAR(40),
            C_NATIONKEY     BIGINT NOT NULL, -- references N_NATIONKEY
            C_PHONE         CHAR(15),
            C_ACCTBAL       DECIMAL,
            C_MKTSEGMENT    CHAR(10),
            C_COMMENT       VARCHAR(117)
        );
    ''')

    conn.execute('''
        CREATE TABLE ORDERS (
            O_ORDERKEY      INTEGER PRIMARY KEY,
            O_CUSTKEY       BIGINT NOT NULL, -- references C_CUSTKEY
            O_ORDERSTATUS   CHAR(1),
            O_TOTALPRICE    DECIMAL,
            O_ORDERDATE     DATE,
            O_ORDERPRIORITY CHAR(15),
            O_CLERK         CHAR(15),
            O_SHIPPRIORITY  INTEGER,
            O_COMMENT       VARCHAR(79)
        );
    ''')

    conn.execute('''
        CREATE TABLE LINEITEM (
            L_ORDERKEY      BIGINT NOT NULL, -- references O_ORDERKEY
            L_PARTKEY       BIGINT NOT NULL, -- references P_PARTKEY (compound fk to PARTSUPP)
            L_SUPPKEY       BIGINT NOT NULL, -- references S_SUPPKEY (compound fk to PARTSUPP)
            L_LINENUMBER    INTEGER,
            L_QUANTITY      DECIMAL,
            L_EXTENDEDPRICE DECIMAL,
            L_DISCOUNT      DECIMAL,
            L_TAX           DECIMAL,
            L_RETURNFLAG    CHAR(1),
            L_LINESTATUS    CHAR(1),
            L_SHIPDATE      DATE,
            L_COMMITDATE    DATE,
            L_RECEIPTDATE   DATE,
            L_SHIPINSTRUCT  CHAR(25),
            L_SHIPMODE      CHAR(10),
            L_COMMENT       VARCHAR(44),
            PRIMARY KEY (L_ORDERKEY, L_LINENUMBER)
        );
    ''')

    conn.execute('''
        CREATE TABLE NATION (
            N_NATIONKEY     INTEGER PRIMARY KEY,
            N_NAME          CHAR(25),
            N_REGIONKEY     BIGINT NOT NULL, -- references R_REGIONKEY
            N_COMMENT       VARCHAR(152)
        );
    ''')

    conn.execute('''
        CREATE TABLE REGION (
            R_REGIONKEY     INTEGER PRIMARY KEY,
            R_NAME          CHAR(25),
            R_COMMENT       VARCHAR(152)
        );
    ''')





# Parse command line arguments.
parser = argparse.ArgumentParser(description="Denormalize TCP-H tables.")
parser.add_argument(
    "tpch_dir",
    help="Directory containing the files generated by the TPC-H tool.",
)
parser.add_argument(
    "--out",
    default="denormalized.csv",
    metavar="out.csv",
    help="Specify a file where to write the denormalized file. Use .csv extension "
    "to write CSV file and .parquet extension to write Parquet file.",
)
parser.add_argument("--customer", default="customer.tbl", metavar="customer.tbl")
parser.add_argument("--lineitem", default="lineitem.tbl", metavar="lineitem.tbl")
parser.add_argument("--nation", default="nation.tbl", metavar="nation.tbl")
parser.add_argument("--orders", default="orders.tbl", metavar="orders.tbl")
parser.add_argument("--part", default="part.tbl", metavar="part.tbl")
parser.add_argument("--partsupp", default="partsupp.tbl", metavar="partsupp.tbl")
parser.add_argument("--region", default="region.tbl", metavar="region.tbl")
parser.add_argument("--supplier", default="supplier.tbl", metavar="supplier.tbl")
args = parser.parse_args()

# Check that all .tbl files generated by TPC-H tool are present.
tbl_files = os.listdir(args.tpch_dir)
required_files = [
    args.customer,
    args.lineitem,
    args.nation,
    args.orders,
    args.part,
    args.partsupp,
    args.region,
    args.supplier,
]
if not all(f in tbl_files for f in required_files):
    print(
        "The specified directory %s does not contain the required .tbl files."
        % args.tpch_dir
    )
    exit(1)

print("Reading and joining data...", end="", flush=True)

# Create DuckDB connection
con = duckdb.connect('../../../tpch_10/tpcdb')
initiate_tables(con)

# Load tables into DuckDB
for file in required_files:
    table_name = file.split('.')[0]
    file = file.split('.')[0] + '.csv'
    file_path = os.path.join(args.tpch_dir, file)
    con.execute(f"INSERT INTO {table_name} SELECT * FROM read_csv('{file_path}', delim = '|', header = false, AUTO_DETECT = true);")

# Perform the denormalization
denormalized_query = """
SELECT
    l.*,
    o.*,
    c.*,
    n.*,
    r.*,
    ps.*,
    p.*,
    s.*
FROM
    lineitem l
JOIN orders o ON l.L_ORDERKEY = o.O_ORDERKEY
JOIN customer c ON o.O_CUSTKEY = c.C_CUSTKEY
JOIN nation n ON c.C_NATIONKEY = n.N_NATIONKEY
JOIN region r ON n.N_REGIONKEY = r.R_REGIONKEY
JOIN partsupp ps ON l.L_PARTKEY = ps.PS_PARTKEY AND l.L_SUPPKEY = ps.PS_SUPPKEY
JOIN part p ON ps.PS_PARTKEY = p.P_PARTKEY
JOIN supplier s ON ps.PS_SUPPKEY = s.S_SUPPKEY
"""


denormalized_tpch = con.execute(denormalized_query).df()

print(" [done]")

print("=====")
print("Denormalized schema:")
print("\n".join(list(denormalized_tpch.columns)))
print("=====")

if args.out.endswith(".parquet"):
    print("Writing Parquet...", end="", flush=True)
    denormalized_tpch.to_parquet(args.out, index=False)
else:
    print("Writing CSV...", end="", flush=True)
    denormalized_tpch.to_csv(args.out, index=False)

print(" [done]")
